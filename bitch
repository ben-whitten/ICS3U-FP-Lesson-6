#!/usr/bin/env python3

# Created by: Ben Whitten
# Created on: October 2019
# Constants for FP

FPS = 60
X_BORDER = 160
Y_BORDER = 128
SCREEN_GRID_X = 16
SCREEN_GRID_Y = 8
SPRITE_SIZE = 16

button_state = {
    "BUTTON_UP" = "up"
    "BUTTON_JUST_PRESSED" = "just pressed"
    "BUTTON_HELD_DOWN" = "held down"
    "BUTTON_RELEASED" = "released"
}

#!/usr/bin/env python3

# Created by: Ben Whitten
# Created on: October 2019
# Makes a sprite move on circuit python

import constants
import ugame
import stage

# an image bank for CircuitPython
image_bank_1 = stage.Bank.from_bmp16("ball.bmp")
# a list of sprites that will be updated every frame
sprites = []

a_button_pressed = constants.button_state["BUTTON_UP"]

pew_sound = open("pew.wav", 'rb')
sound = ugame.audio
sound.stop()
sound.mute(False)

def main():


    # this function sets the background

    background = stage.Grid(image_bank_1, 10, 8)

    sprites = []

    ball_one = stage.Sprite(image_bank_1, 3, int(constants.X_BORDER/2 -
                                                 constants.Y_BORDER/2),
                            int(constants.X_BORDER/2 - constants.Y_BORDER/2))
    sprites.append(ball_one)

    # create a stage for the background to show up on
    #   and set the frame rate to 60fps
    game = stage.Stage(ugame.display, constants.FPS)
    # set the background layer
    game.layers = sprites + [background]
    game.render_block()

    while True:
        # get user inputs
        keys = ugame.buttons.get_pressed()
        # print(keys)

        if keys & ugame.K_UP:
            if ball_one.y < 0:
                ball_one.move(ball_one.x, 0)
            else:
                ball_one.move(ball_one.x, ball_one.y - 3)
            pass
        if keys & ugame.K_DOWN:
            if ball_one.y > constants.Y_BORDER - constants.SPRITE_SIZE:
                ball_one.move(ball_one.x, constants.Y_BORDER -
                              constants.SPRITE_SIZE)
            else:
                ball_one.move(ball_one.x, ball_one.y + 3)
            pass
        if keys & ugame.K_LEFT:
            if ball_one.x < 0:
                ball_one.move(0, ball_one.y)
            else:
                ball_one.move(ball_one.x - 3, ball_one.y)
            pass
        if keys & ugame.K_RIGHT:
            if ball_one.x > constants.X_BORDER - constants.SPRITE_SIZE:
                ball_one.move(constants.X_BORDER - constants.SPRITE_SIZE,
                              ball_one.y)
            else:
                ball_one.move(ball_one.x + 3, ball_one.y)
            pass
        if keys & ugame.K_X != 0:
            if a_button_pressed == constants.button_state[BUTTON_UP]:
                a_button_pressed = constants.button_state[BUTTON_JUST_PRESSED]
            elif a_button_pressed == constants.button_state[BUTTON_JUST_PRESSED]:
                a_button_pressed = constants.button_state[BUTTON_HELD_DOWN]
        else:
            if a_button_pressed == constants.button_state[BUTTON_HELD_DOWN]:
                a_button_pressed = constants.button_state[BUTTON_RELEASED]
            else:
                a_button_pressed == constants.button_state[BUTTON_UP]

        if a_button_pressed == constants.button_state[BUTTON_JUST_PRESSED]:
            sound.play(pew_sound)

        # update game logic
        game.render_sprites(sprites)
        game.tick()


if __name__ == "__main__":
    main()
